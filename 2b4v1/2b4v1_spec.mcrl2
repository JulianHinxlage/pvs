sort
	CardinalDirection = struct north | east | south | west;
	Colour = struct red | yellow | green | none;

map
	next: Colour -> Colour;

eqn
	next(none) = red;
	next(red) = green;
	next(green) = yellow;
	next(yellow) = red;

act
	show: CardinalDirection # Colour;
	changeActive;
	changePhase;
	changeActiveAll;
	changePhaseBoth;

proc
	TrafficLight(d: CardinalDirection) =
		TrafficLight(d, none);

	TrafficLight(d : CardinalDirection,c : Colour) = 
		(d == north || d == south) 
			-> show(d, next(c)).(
				(next(c) == red)
					-> changeActive.TrafficLight2(d, next(c))
					<> changePhase.TrafficLight(d, next(c))
			)
			<> changeActive.TrafficLight2(d, c);

	TrafficLight2(d : CardinalDirection,c : Colour) = 
		(d == west || d == east) 
			-> show(d, next(c)).(
				(next(c) == red)
					-> changeActive.TrafficLight(d, next(c))
					<> changePhase.TrafficLight2(d, next(c))
			)
			<> changeActive.TrafficLight(d, c);

	Crossing =
		hide(
			{
				changeActiveAll,
				changePhaseBoth
			},
		allow(
			{
				show,
				changeActiveAll,
				changePhaseBoth
			},
		comm(
			{
				changeActive|changeActive|changeActive|changeActive -> changeActiveAll,
				changePhase|changePhase -> changePhaseBoth
			},
			TrafficLight(west) ||
			TrafficLight(south)||
			TrafficLight(east) ||
			TrafficLight(north)
		)));

init
	Crossing;